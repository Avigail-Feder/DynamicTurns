package jpa;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;

import javax.persistence.Persistence;

import entities.User;



public class UserDAO {

	public static BooleanResponse isExistUser(String id, String first, String last) {
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("DynnamicTurn");
		EntityManager em = emf.createEntityManager();
		
		try {
			em.getTransaction().begin();
			System.out.println("UserDAO, isExistUser: id: " + id + " first: " + first + " last: " + last);
			User u = em.find(User.class, id);
			
			if (u != null)
				return new BooleanResponse(u.getFirst_name().equals(first) && u.getLast_name().equals(last));
			return new BooleanResponse(false);
		}
		catch(Exception e){
			System.out.println("message"+e.getMessage());
			System.out.println("didn't success in try");
			return new BooleanResponse(false);
		}
		finally {
			em.close();
		}
		
		
	}

	public static BooleanResponse addUser(User u) {
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("jpa");
		EntityManager em = emf.createEntityManager();
		System.out.println("in DAO");
		try {
			em.getTransaction().begin();
			try {
				em.persist(u);
				em.getTransaction().commit();
				return new BooleanResponse(true);
			} catch (Exception e) {
				System.out.println(e.getMessage());
				e.printStackTrace();
				em.getTransaction().rollback();
				return new BooleanResponse(false);
			}
		} finally {
			em.close();
		}

	}

	public static BooleanResponse updateUser(User user) {
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("jpa");
		EntityManager em = emf.createEntityManager();
		em.getTransaction().begin();
		User u = em.find(User.class, user.getId());
		if (u != null) {
			em.remove(u);
		}
		em.close();
		return addUser(user);

	}

	public static BooleanResponse deleteUser(String id) {
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("jpa");
		EntityManager em = emf.createEntityManager();
		em.getTransaction().begin();
		try {

			em.remove(em.find(User.class, id));
			em.getTransaction().commit();
			return new BooleanResponse(true);
		} catch (Exception e) {
			return new BooleanResponse(false);
		}
		finally {
			em.close();
		}

	}

}